// Dual Clock FIFO
module dual_fifo (clk1, clk2, rst, ren, wen, buf_in, counter, buf_out, buf_empty, buf_full);
  input clk1, clk2, rst;
  input [7:0] buf_in;
  input ren, wen;
  output reg buf_full, buf_empty;
  output reg [5:0] counter;
  output reg [7:0] buf_out;
  
  reg [7:0] buf_mem [63:0];	//8 bit 64 entries
  reg Rptr, Wptr;	//read & write pointer
  
  //1. check status flags
  always @ (counter) begin
    buf_empty = (counter == 6'd0);
    buf_full = (counter == 6'd63);
  end
  
  //2. update counter write
  always @ (posedge clk1 or posedge rst) begin
    if (rst) 
      counter <= 6'd0;
    else if (~buf_full && wen)
      counter <= counter + 1;
    else if (buf_full || ~wen)
      counter <= counter;
  end
  
  //3. update counter read
  always @ (posedge clk2 or posedge rst) begin
    if (rst)
      counter <= 6'd0;
    else if (~buf_empty && ren)
      counter <= counter - 1;
  end
  
  //3. write block
  always @ (posedge clk1 or posedge rst) begin
    if (rst) begin
      buf_mem [Wptr] <= 8'd0;
      Wptr <= 0;
    end
    else if (!buf_full && wen) begin
      buf_mem [Wptr] <= buf_in;
      Wptr <= Wptr + 1;
      end
  end
  
  //4. read block
  always @ (posedge clk2 or posedge rst) begin
    if (rst) begin
      buf_out <= 8'd0;
      Rptr <= 8'd0;
    end
    else if (~buf_empty && ren) begin
      buf_out <= buf_mem[Rptr];
      Rptr <= Rptr + 1;
    end
  end
  
endmodule
